/**
 * Provider for generating questions, hints, and feedback using AI
 */

import { Injectable, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { QuestionType } from "../../question/schemas/question.schema";
import { AiService } from "../ai.service";

@Injectable()
export class QuestionGenerationProvider {
  private readonly logger = new Logger(QuestionGenerationProvider.name);

  constructor(
    private configService: ConfigService,
    private readonly ai: AiService
  ) {}

  /**
   * Generate questions for a video based on its transcript
   */
  async generateQuestions(videoId: string, transcript: string) {
    const promptSystem = `
      You are GuruJi, an Indian ed-tech quiz master.
      Write clear, concept-checking questions in Hinglish
      for class-8 learners. Reply ONLY in valid JSON.
      `.trim();

          const promptUser = `
      Video title: "${videoId}"
      Transcript:
      ${transcript}

      TASK:
      1. Split the video into about 12 logical segments.
      2. For each segment create exactly one question.
      3. Follow this schema:
      [
        {"segmentIdx":0,"startSec":0,"endSec":120,"type":"multiple_choice",
        "text":"___","options":["A","B","C","D"],
        "correctAnswer":2,"hint":"...","feedback":{"correct":"...","incorrect":"..."}}
      ]
      `.trim();

    const raw = await this.ai.chatCompletion(
      [
        { role: "system", content: promptSystem },
        { role: "user", content: promptUser },
      ],
      { temperature: 0.4 }
    );

    return JSON.parse(raw); // returns array with full schema
  }

  /**
   * Generate a hint for a question
   */
  async generateHint(questionText: string, transcript: string): Promise<string> {
    try {
      this.logger.log(`Generating hint for question: ${questionText.substring(0, 30)}...`);

      // In a real implementation, this would use an LLM to generate a contextual hint
      // For now, we'll return a dummy hint

      // Simulate processing delay
      await new Promise((resolve) => setTimeout(resolve, 500));

      return `This is a hint for the question: "${questionText.substring(0, 30)}...". 
      In a real implementation, this would be a contextual hint generated by an LLM 
      based on the question and the relevant part of the transcript.`;
    } catch (error) {
      this.logger.error(`Hint generation failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Generate feedback for an answer
   */
  async generateFeedback(
    questionText: string,
    correctAnswer: string | number,
    userAnswer: string | number,
    isCorrect: boolean
  ): Promise<string> {
    try {
      this.logger.log(`Generating feedback for question: ${questionText.substring(0, 30)}...`);

      // In a real implementation, this would use an LLM to generate personalized feedback
      // For now, we'll return dummy feedback based on correctness

      // Simulate processing delay
      await new Promise((resolve) => setTimeout(resolve, 500));

      if (isCorrect) {
        return `Great job! Your answer "${userAnswer}" is correct. 
        In a real implementation, this would be personalized positive feedback 
        generated by an LLM based on the question and answer.`;
      } else {
        return `Not quite. The correct answer is "${correctAnswer}". 
        In a real implementation, this would be personalized constructive feedback 
        generated by an LLM explaining why the answer is incorrect and providing guidance.`;
      }
    } catch (error) {
      this.logger.error(`Feedback generation failed: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Create a multiple choice question
   */
  private createMultipleChoiceQuestion(videoId: string, timestamp: number): any {
    return {
      videoId,
      text: "What is the main advantage of using TypeScript over JavaScript?",
      type: "multiple_choice" as QuestionType,
      options: [
        "TypeScript is faster at runtime",
        "TypeScript has static type checking",
        "TypeScript uses less memory",
        "TypeScript has more libraries available",
      ],
      correctAnswer: 1, // Index of the correct option
      timestamp,
      feedback: {
        correct: "Correct! TypeScript's static type checking helps catch errors during development.",
        incorrect:
          "Incorrect. TypeScript's main advantage is static type checking, which helps catch errors during development.",
      },
      hint: "Think about what happens during the development process rather than at runtime.",
    };
  }

  /**
   * Create a true/false question
   */
  private createTrueFalseQuestion(videoId: string, timestamp: number): any {
    return {
      videoId,
      text: "NestJS is built on top of Express.js by default.",
      type: "true_false" as QuestionType,
      options: ["True", "False"],
      correctAnswer: 0, // True
      timestamp,
      feedback: {
        correct: "Correct! NestJS uses Express.js as its default HTTP server framework.",
        incorrect:
          "Incorrect. NestJS does use Express.js as its default HTTP server framework, although it can also use Fastify.",
      },
      hint: "NestJS can use different HTTP server frameworks underneath.",
    };
  }

  /**
   * Create a fill-in-the-blank question
   */
  private createFillBlankQuestion(videoId: string, timestamp: number): any {
    return {
      videoId,
      text: "In MongoDB, documents are stored in ______.",
      type: "fill_blank" as QuestionType,
      correctAnswer: "collections",
      timestamp,
      feedback: {
        correct:
          "Correct! In MongoDB, documents are stored in collections, which are analogous to tables in relational databases.",
        incorrect:
          "Incorrect. In MongoDB, documents are stored in collections, which are analogous to tables in relational databases.",
      },
      hint: "Think about the MongoDB equivalent of tables in relational databases.",
    };
  }

  /**
   * Create a short answer question
   */
  private createShortAnswerQuestion(videoId: string, timestamp: number): any {
    return {
      videoId,
      text: "Explain what dependency injection is and why it's useful.",
      type: "short_answer" as QuestionType,
      correctAnswer: "dependency injection",
      timestamp,
      feedback: {
        correct:
          "Great explanation! Dependency injection is indeed a design pattern that helps with loose coupling and testability.",
        incorrect:
          'Your answer could be improved. Dependency injection is a design pattern where dependencies are "injected" into a class rather than created inside it, which helps with loose coupling and testability.',
      },
      hint: "It's a design pattern related to how components get their dependencies.",
    };
  }
}
